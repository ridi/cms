on:
  release:
    types:
      - published

name: Deploy to Amazon ECS (prod)

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get the version
        id: get_version
        run: |
          echo ::set-output name=ref_name::${GITHUB_REF#refs/*/}
          echo ::set-output name=ref_branch::${GITHUB_REF#refs/heads/}
          echo ::set-output name=ref_tag::${GITHUB_REF#refs/tags/}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{ steps.login-ecr.outputs.registry }}/infosec/cms-auth:tag-${{ steps.get_version.outputs.ref_tag }}
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Substitute envs in a task definition
        uses: danielr1996/envsubst-action@1.0.0
        env:
          DEBUG: 0
          AUTH_USE_TEST: 0
          TEST_AUTH_DISABLE: 0
          TEST_ID: 0
          INSTANT_AUTH: cloudflare
          CF_ACCESS_DOMAIN: admin.ridibooks.com
          CMS_RPC_URL: http://127.0.0.1
          VERSION: tag-${{ steps.get_version.outputs.ref_tag }}
          EXECUTION_ROLE_ARN: arn:aws:iam::697122891294:role/role-task-exec-infosec
          CPU: 512
          MEMORY: 1024
          AWSLOGS_GROUP: /ecs/infosec-apps/infosec-cms-auth
        with:
          input: task-definition.json.template
          output: task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: web
          image: ${{ steps.login-ecr.outputs.registry }}/infosec/cms-auth:tag-${{ steps.get_version.outputs.ref_tag }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: infosec-apps
          service: infosec-cms-auth
          wait-for-service-stability: true

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: infosec-cms-auth
          fields: repo,workflow,ref,commit
          mention: sre-team
          if_mention: failure,cancelled
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ always() }}
